#!/usr/bin/env node
/**
 * Date Fix Monitor
 * ÎÇ†Ïßú ÌòïÏãù Ïò§Î•òÎ•º ÏûêÎèôÏúºÎ°ú Í∞êÏßÄÌïòÍ≥† ÏàòÏ†ï
 * 2025-08-20 ÏÉùÏÑ±
 */

const fs = require('fs');
const path = require('path');

class DateFixMonitor {
    constructor() {
        this.configPath = 'K:\\PortableApps\\Claude-Code\\.claude.json';
        this.today = new Date();
        // Ïã§Ï†ú ÎÇ†Ïßú (ÌôòÍ≤Ω Î≥ÄÏàòÏóêÏÑú ÌôïÏù∏)
        this.actualYear = 2025;
        this.actualMonth = 8; // 8Ïõî
        this.actualDay = 20;
    }
    
    // ÎÇ†Ïßú Ìå®ÌÑ¥ Í∞êÏßÄ Î∞è ÏàòÏ†ï
    fixDates() {
        try {
            let content = fs.readFileSync(this.configPath, 'utf8');
            let json = JSON.parse(content);
            let modified = false;
            
            // firstStartTime ÏàòÏ†ï
            if (json.firstStartTime && json.firstStartTime.includes('2025-01-')) {
                const oldDate = json.firstStartTime;
                json.firstStartTime = json.firstStartTime.replace('2025-01-', '2025-08-');
                console.log(`‚úÖ Fixed firstStartTime: ${oldDate} ‚Üí ${json.firstStartTime}`);
                modified = true;
            }
            
            // claudeCodeFirstTokenDate ÏàòÏ†ï
            if (json.claudeCodeFirstTokenDate && json.claudeCodeFirstTokenDate.includes('2025-01-')) {
                const oldDate = json.claudeCodeFirstTokenDate;
                json.claudeCodeFirstTokenDate = json.claudeCodeFirstTokenDate.replace('2025-01-', '2025-08-');
                console.log(`‚úÖ Fixed claudeCodeFirstTokenDate: ${oldDate} ‚Üí ${json.claudeCodeFirstTokenDate}`);
                modified = true;
            }
            
            // ÎØ∏Îûò ÎÇ†Ïßú Î∞©ÏßÄ (2025ÎÖÑ 9Ïõî Ïù¥ÌõÑ)
            if (json.firstStartTime && json.firstStartTime.includes('2025-09-')) {
                json.firstStartTime = `2025-08-${this.actualDay}T03:37:01.975Z`;
                console.log(`‚úÖ Fixed future date in firstStartTime`);
                modified = true;
            }
            
            if (modified) {
                // ÏàòÏ†ïÎêú ÎÇ¥Ïö© Ï†ÄÏû•
                fs.writeFileSync(this.configPath, JSON.stringify(json, null, 2));
                console.log('üíæ Saved corrected dates to .claude.json');
                return true;
            } else {
                console.log('‚úì Dates are correct');
                return false;
            }
            
        } catch (e) {
            console.error('‚ùå Error fixing dates:', e.message);
            return false;
        }
    }
    
    // ÌååÏùºÎ™Ö ÎÇ†Ïßú Ïò§Î•ò Í∞êÏßÄ
    checkFilenameDates() {
        const files = fs.readdirSync('K:\\PortableApps\\Claude-Code');
        const wrongDates = [];
        
        files.forEach(file => {
            // 20250120 Í∞ôÏùÄ ÏûòÎ™ªÎêú ÎÇ†Ïßú Ìå®ÌÑ¥ Ï∞æÍ∏∞
            if (file.includes('20250120') || file.includes('2025-01-20')) {
                wrongDates.push(file);
            }
        });
        
        if (wrongDates.length > 0) {
            console.log('\n‚ö†Ô∏è Files with wrong dates:');
            wrongDates.forEach(file => {
                const correctName = file
                    .replace('20250120', '20250820')
                    .replace('2025-01-20', '2025-08-20');
                console.log(`  ${file} ‚Üí should be ${correctName}`);
            });
        }
        
        return wrongDates;
    }
    
    // Ïó∞ÏÜç Î™®ÎãàÌÑ∞ÎßÅ
    startMonitoring(interval = 60000) {
        console.log('üîç Starting date monitoring...');
        console.log(`üìÖ Actual date: ${this.actualYear}-${String(this.actualMonth).padStart(2, '0')}-${this.actualDay}`);
        
        // Ï¥àÍ∏∞ ÏàòÏ†ï
        this.fixDates();
        this.checkFilenameDates();
        
        // Ï£ºÍ∏∞Ï†Å Í≤ÄÏÇ¨
        setInterval(() => {
            this.fixDates();
        }, interval);
        
        console.log('‚úÖ Monitoring active (checking every minute)');
    }
}

// ÏßÅÏ†ë Ïã§Ìñâ
if (require.main === module) {
    const monitor = new DateFixMonitor();
    
    const args = process.argv.slice(2);
    const command = args[0];
    
    switch (command) {
        case 'fix':
            monitor.fixDates();
            monitor.checkFilenameDates();
            break;
        case 'monitor':
            monitor.startMonitoring();
            process.stdin.resume();
            break;
        default:
            console.log(`
Date Fix Monitor
Usage:
  node date-fix-monitor.js fix     - Fix dates once
  node date-fix-monitor.js monitor - Start monitoring
            `);
    }
}

module.exports = DateFixMonitor;