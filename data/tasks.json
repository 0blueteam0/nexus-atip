{
  "tasks": [
    {
      "id": "9d109227-293d-4ff6-a9b4-41835442c49f",
      "name": "현재 index.html 구조 분석 및 백업",
      "description": "현재 작업중인 index.html의 구조와 기능을 분석하고 백업 생성. 어떤 라이브러리를 사용중인지, 어떤 기능이 구현되어 있는지 파악",
      "status": "pending",
      "dependencies": [],
      "createdAt": "2025-08-27T14:16:11.292Z",
      "updatedAt": "2025-08-27T14:16:11.292Z",
      "implementationGuide": "1. index.html 읽기\n2. 사용중인 라이브러리 확인\n3. index-backup-[timestamp].html로 백업\n4. 현재 기능 목록 작성",
      "verificationCriteria": "백업 파일 생성 확인, 현재 구조 문서화 완료",
      "analysisResult": "index.html 기반 프로토타입을 Vite 기반 모던 개발 환경으로 점진적 마이그레이션하면서 UI/UX 중심 풀스택 개발 워크플로우 구축"
    },
    {
      "id": "db08dbcc-461e-487e-a315-5b9175a591f0",
      "name": "Vite 프로젝트 병렬 설정",
      "description": "기존 index.html을 방해하지 않고 vite-app/ 폴더에 별도 Vite 프로젝트 생성. HMR(Hot Module Replacement)로 더 빠른 개발 환경 구성",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "9d109227-293d-4ff6-a9b4-41835442c49f"
        }
      ],
      "createdAt": "2025-08-27T14:16:11.292Z",
      "updatedAt": "2025-08-27T14:16:11.292Z",
      "implementationGuide": "1. npm create vite@latest vite-app -- --template vanilla\n2. 기존 index.html 내용을 vite-app/index.html로 복사\n3. npm install && npm run dev\n4. localhost:5173에서 확인",
      "verificationCriteria": "Vite 개발 서버 정상 작동, HMR 기능 확인",
      "analysisResult": "index.html 기반 프로토타입을 Vite 기반 모던 개발 환경으로 점진적 마이그레이션하면서 UI/UX 중심 풀스택 개발 워크플로우 구축"
    },
    {
      "id": "9d0abb52-2d16-4aeb-a8c9-322dc08d2c69",
      "name": "컴포넌트 기반 구조로 리팩토링",
      "description": "index.html의 반복되는 UI 요소를 재사용 가능한 컴포넌트로 분리. Web Components 또는 간단한 JS 모듈로 구성",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "db08dbcc-461e-487e-a315-5b9175a591f0"
        }
      ],
      "createdAt": "2025-08-27T14:16:11.292Z",
      "updatedAt": "2025-08-27T14:16:11.292Z",
      "implementationGuide": "1. components/ 폴더 생성\n2. 반복되는 UI 패턴 식별\n3. 각 컴포넌트를 별도 JS 파일로 분리\n4. import/export로 모듈화",
      "verificationCriteria": "최소 3개 이상 컴포넌트 분리, 재사용성 확인",
      "analysisResult": "index.html 기반 프로토타입을 Vite 기반 모던 개발 환경으로 점진적 마이그레이션하면서 UI/UX 중심 풀스택 개발 워크플로우 구축"
    },
    {
      "id": "6c590bac-cc9d-4634-a6b3-a064e4d2c4f9",
      "name": "Figma 디자인 시스템 연동",
      "description": "Figma에서 디자인 토큰(색상, 폰트, 간격)을 정의하고 CSS 변수로 자동 동기화. Figma Tokens 플러그인 활용",
      "notes": "Figma 무료 플랜으로도 충분, 선택사항",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "9d0abb52-2d16-4aeb-a8c9-322dc08d2c69"
        }
      ],
      "createdAt": "2025-08-27T14:16:11.292Z",
      "updatedAt": "2025-08-27T14:16:11.292Z",
      "implementationGuide": "1. Figma에서 디자인 시스템 생성\n2. Design Tokens 정의 (colors, typography, spacing)\n3. tokens.css 파일로 export\n4. CSS 변수로 적용",
      "verificationCriteria": "디자인 토큰 CSS 파일 생성, 일관된 스타일 적용",
      "analysisResult": "index.html 기반 프로토타입을 Vite 기반 모던 개발 환경으로 점진적 마이그레이션하면서 UI/UX 중심 풀스택 개발 워크플로우 구축"
    },
    {
      "id": "2dfc1d08-8b5c-4a14-b618-48a609f138fe",
      "name": "Mock API 서버 구축",
      "description": "json-server 또는 MSW로 백엔드 없이 API 목업 구현. 프론트엔드 개발과 백엔드 개발을 분리",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "9d0abb52-2d16-4aeb-a8c9-322dc08d2c69"
        }
      ],
      "createdAt": "2025-08-27T14:16:11.292Z",
      "updatedAt": "2025-08-27T14:16:11.292Z",
      "implementationGuide": "1. npm install -D json-server\n2. db.json 파일 생성\n3. package.json에 mock 스크립트 추가\n4. API 엔드포인트 테스트",
      "verificationCriteria": "Mock API 서버 실행, CRUD 작업 테스트 완료",
      "analysisResult": "index.html 기반 프로토타입을 Vite 기반 모던 개발 환경으로 점진적 마이그레이션하면서 UI/UX 중심 풀스택 개발 워크플로우 구축"
    },
    {
      "id": "4bd9dfad-47e4-4cd1-933e-198a4c0e0e4d",
      "name": "실제 백엔드 구축",
      "description": "Express.js 또는 Fastify로 실제 백엔드 구현. Mock API와 동일한 인터페이스 유지",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "2dfc1d08-8b5c-4a14-b618-48a609f138fe"
        }
      ],
      "createdAt": "2025-08-27T14:16:11.292Z",
      "updatedAt": "2025-08-27T14:16:11.292Z",
      "implementationGuide": "1. backend/ 폴더 생성\n2. Express + SQLite 설정\n3. Mock API와 동일한 라우트 구현\n4. 환경변수로 Mock/Real 전환",
      "verificationCriteria": "백엔드 서버 실행, 프론트엔드와 연동 확인",
      "analysisResult": "index.html 기반 프로토타입을 Vite 기반 모던 개발 환경으로 점진적 마이그레이션하면서 UI/UX 중심 풀스택 개발 워크플로우 구축"
    },
    {
      "id": "49bbf59e-01d5-49d1-87f1-318d91f8b74b",
      "name": "Playwright E2E 테스트 설정",
      "description": "이미 설치된 Playwright MCP를 활용하여 E2E 테스트 자동화 구축",
      "status": "pending",
      "dependencies": [
        {
          "taskId": "4bd9dfad-47e4-4cd1-933e-198a4c0e0e4d"
        }
      ],
      "createdAt": "2025-08-27T14:16:11.292Z",
      "updatedAt": "2025-08-27T14:16:11.292Z",
      "implementationGuide": "1. tests/e2e/ 폴더 생성\n2. 주요 사용자 시나리오 테스트 작성\n3. CI/CD 파이프라인 연동\n4. 테스트 리포트 생성",
      "verificationCriteria": "3개 이상 E2E 테스트 시나리오 작성 및 통과",
      "analysisResult": "index.html 기반 프로토타입을 Vite 기반 모던 개발 환경으로 점진적 마이그레이션하면서 UI/UX 중심 풀스택 개발 워크플로우 구축"
    }
  ]
}